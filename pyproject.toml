[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "PassBot"
version = "1.0.0"
description = "A collections of bots for French Passeport & co!"
authors = ["Yannick Chabbert <yannick.chabbert.it@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
psycopg2-binary = "^2.9.5"
sqlalchemy = {extras = ["mypy"], version = "^2.0.3"}
python-dotenv = "^0.21.1"
alembic = "^1.9.2"
scrapy = "^2.8.0"
pydantic = {extras = ["email"], version = "^1.10.4"}
python-slugify = "^8.0.0"

[tool.poetry.group.test.dependencies]
tox = "^4.4.5"
factory-boy = "^3.2.1"
pytest = "^7.2.1"
pytest-cov = "^4.0.0"
pytest-reverse = "^1.5.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.0.4"
pylama = {extras = ["toml"], version = "^8.4.1"}
isort = "^5.10.1"
mypy = "^1.0.1"
types-python-slugify = "^8.0.0.0"

[tool.pylama]
format = "pylint"
linters = "pycodestyle,pyflakes,mccabe"
skip = ".tox/*,*/alembic/*,*/crawlers/settings.py,*/crawlers/middlewares.py"

[tool.pylama.linter.pycodestyle]
max_line_length = 119

[tool.pylama.linter.mccabe]
complexity = 15

[tool.mypy]
plugins = [
    "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin",
]
exclude = [
    "alembic",
    "middlewares.py",
]
disallow_untyped_defs = true
ignore_missing_imports = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disable_error_code = [
    "annotation-unchecked",
]

[tool.isort]
src_paths = ["passbot", "tests"]
line_length = 120
combine_as_imports = true
multi_line_output = 5
include_trailing_comma = true
skip = ".tox,alembic"
sections = "FUTURE,STDLIB,FRAMEWORK,THIRDPARTY,FIRSTPARTY,TESTFOLDER,LOCALFOLDER"
known_framework = "scrapy,pydantic,sqlalchemy,alembic,pytest"
known_first_party = "passbot"
known_testfolder = "tests"

[tool.pytest.ini_options]
addopts = "-ra -q"
testpaths = [
    "tests",
]

[tool.coverage.run]
source = ["passbot", "tests"]
branch = true
omit = [
    "passbot/alembic/*",
    "passbot/crawlers/middlewares.py",
    "passbot/crawlers/settings.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "def __str__",
    "def __repr__",
    "pass",
]
